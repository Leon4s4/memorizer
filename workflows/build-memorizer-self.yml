name: Build Memorizer Self-Contained

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'memorizer-self/**'
      - '.github/workflows/build-memorizer-self.yml'
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'memorizer-self/**'
  release:
    types: [created]
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/memorizer-self

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true  # Pull Git LFS files (models)

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Verify models exist
        run: |
          echo "Checking for required model files..."
          if [ ! -f "memorizer-self/models/all-MiniLM-L6-v2.gguf" ]; then
            echo "❌ ERROR: Embedding model not found!"
            echo "Please ensure models are committed or run: cd memorizer-self && ./download-models.sh"
            exit 1
          fi
          if [ ! -f "memorizer-self/models/tinyllama-1.1b-chat.gguf" ]; then
            echo "❌ ERROR: LLM model not found!"
            echo "Please ensure models are committed or run: cd memorizer-self && ./download-models.sh"
            exit 1
          fi
          echo "✅ All required models found"
          ls -lh memorizer-self/models/

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./memorizer-self
          file: ./memorizer-self/Dockerfile
          platforms: linux/amd64  # x64 only - LLamaSharp limitation
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          echo "Starting container for health check..."
          docker run -d --name test-memorizer-self \
            -p 9000:8000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

          echo "Waiting for service to start..."
          sleep 15

          echo "Testing health endpoint..."
          for i in {1..10}; do
            if curl -f http://localhost:9000/healthz; then
              echo "✅ Health check passed!"
              docker logs test-memorizer-self
              docker stop test-memorizer-self
              docker rm test-memorizer-self
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 5
          done

          echo "❌ Health check failed!"
          docker logs test-memorizer-self
          docker stop test-memorizer-self
          docker rm test-memorizer-self
          exit 1

      - name: Generate build summary
        if: always()
        run: |
          echo "## Build Summary 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** \`${{ steps.meta.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Components" >> $GITHUB_STEP_SUMMARY
          echo "- **.NET:** 9.0" >> $GITHUB_STEP_SUMMARY
          echo "- **LLamaSharp:** 0.18.0" >> $GITHUB_STEP_SUMMARY
          echo "- **MCP:** 0.4.0-preview.2" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 9000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  dotnet-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: |
          cd memorizer-self/src/Memorizer.Self
          dotnet restore

      - name: Build
        run: |
          cd memorizer-self/src/Memorizer.Self
          dotnet build --configuration Release --no-restore

      - name: Check for warnings
        run: |
          cd memorizer-self/src/Memorizer.Self
          dotnet build --configuration Release --no-restore --warnaserror || echo "::warning::Build produced warnings"
